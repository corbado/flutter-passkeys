// Autogenerated from Pigeon (v10.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.corbado.passkeys_android;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Messages {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RegisterResponse {
    private @NonNull String responseJSON;

    public @NonNull String getResponseJSON() {
      return responseJSON;
    }

    public void setResponseJSON(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"responseJSON\" is null.");
      }
      this.responseJSON = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    RegisterResponse() {}

    public static final class Builder {

      private @Nullable String responseJSON;

      public @NonNull Builder setResponseJSON(@NonNull String setterArg) {
        this.responseJSON = setterArg;
        return this;
      }

      public @NonNull RegisterResponse build() {
        RegisterResponse pigeonReturn = new RegisterResponse();
        pigeonReturn.setResponseJSON(responseJSON);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(responseJSON);
      return toListResult;
    }

    static @NonNull RegisterResponse fromList(@NonNull ArrayList<Object> list) {
      RegisterResponse pigeonResult = new RegisterResponse();
      Object responseJSON = list.get(0);
      pigeonResult.setResponseJSON((String) responseJSON);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AuthenticateResponse {
    private @NonNull String responseJSON;

    public @NonNull String getResponseJSON() {
      return responseJSON;
    }

    public void setResponseJSON(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"responseJSON\" is null.");
      }
      this.responseJSON = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    AuthenticateResponse() {}

    public static final class Builder {

      private @Nullable String responseJSON;

      public @NonNull Builder setResponseJSON(@NonNull String setterArg) {
        this.responseJSON = setterArg;
        return this;
      }

      public @NonNull AuthenticateResponse build() {
        AuthenticateResponse pigeonReturn = new AuthenticateResponse();
        pigeonReturn.setResponseJSON(responseJSON);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(responseJSON);
      return toListResult;
    }

    static @NonNull AuthenticateResponse fromList(@NonNull ArrayList<Object> list) {
      AuthenticateResponse pigeonResult = new AuthenticateResponse();
      Object responseJSON = list.get(0);
      pigeonResult.setResponseJSON((String) responseJSON);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class PasskeysApiCodec extends StandardMessageCodec {
    public static final PasskeysApiCodec INSTANCE = new PasskeysApiCodec();

    private PasskeysApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AuthenticateResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return RegisterResponse.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AuthenticateResponse) {
        stream.write(128);
        writeValue(stream, ((AuthenticateResponse) value).toList());
      } else if (value instanceof RegisterResponse) {
        stream.write(129);
        writeValue(stream, ((RegisterResponse) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface PasskeysApi {

    void canAuthenticate(@NonNull Result<Boolean> result);

    void register(@NonNull String options, @NonNull Result<RegisterResponse> result);

    void authenticate(@NonNull String options, @NonNull Result<AuthenticateResponse> result);

    void getSignatureFingerprint(@NonNull Result<String> result);

    /** The codec used by PasskeysApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PasskeysApiCodec.INSTANCE;
    }
    /**Sets up an instance of `PasskeysApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable PasskeysApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PasskeysApi.canAuthenticate", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<Boolean> resultCallback =
                    new Result<Boolean>() {
                      public void success(Boolean result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.canAuthenticate(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PasskeysApi.register", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String optionsArg = (String) args.get(0);
                Result<RegisterResponse> resultCallback =
                    new Result<RegisterResponse>() {
                      public void success(RegisterResponse result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.register(optionsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PasskeysApi.authenticate", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String optionsArg = (String) args.get(0);
                Result<AuthenticateResponse> resultCallback =
                    new Result<AuthenticateResponse>() {
                      public void success(AuthenticateResponse result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.authenticate(optionsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.PasskeysApi.getSignatureFingerprint", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<String> resultCallback =
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getSignatureFingerprint(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
